{"['float_1']": [["the `float_1` should be greater than 0.0", "the `float_1` should be between 0 and 1", "the `float_1` should be less than or equal to 1.0", "the `float_1` should be in the range [0, 1]", "the `float_1` should be greater than 0", "the `float_1` should be non-negative", "the `float_1` should be greater than or equal to 0"], ["the `float_1` should not have a value or the value should be equal to 0", "the `float_1` should be equal to 0.0"]], "['scalar_1']": [["the `scalar_1` should not be complex", "the `scalar_1` should be greater than or equal to 0.0", "the `scalar_1` should not be a complex type", "the `scalar_1` should not have a value", "the `scalar_1` should not be equal to 0"]], "['tensor_1']": [["the `tensor_1` should have 1 dimension", "the `tensor_1` should be a 2d tensor", "the `tensor_1` should be a single element tensor", "the `tensor_1` should be a 1d or 2d tensor", "the `tensor_1` should be a 0d or 1d tensor and have a single element", "the `tensor_1` should have a dimension of 1", "the `tensor_1` should be a 1-d tensor", "the `tensor_1` should be 1 or 2d tensor", "the `tensor_1` should have a stride of 1", "the `self` and `tensor_1` should have the same size at the last dimension"], ["the `tensor_1` should be a tensor on a cpu or cuda device", "the `tensor_1` should be on a cpu or cuda device", "the `tensor_1` should be a cpu tensor", "the `tensor_1` should not be on cpu device", "the `tensor_1` should be located on the cpu device"], ["the `tensor_1` should be a floating point or complex dtype", "the `tensor_1` should be a complex tensor", "the `tensor_1` should be a floating point tensor"], ["the `tensor_1` should be at least one-dimensional", "the `tensor_1` should have at least 2 dimensions", "the `tensor_1` should have 2 dimensions", "the `tensor_1` should have two or fewer dimensions", "the `tensor_1` should have more than 2 dimensions", "the `tensor_1` should have <= 2 dimensions", "the `tensor_1` should have at least 3 dimensions", "the `tensor_1` should be at least a 2d tensor"], ["the `tensor_1` should have more than 0 elements", "the `tensor_1` should have all non-negative values", "the `tensor_1` should have a non-negative number of elements", "the `tensor_1` should have a non-zero number of elements"], ["the `tensor_1` should have a dimension greater than or equal to 1", "the `tensor_1` should have a dimension greater than 0 and contain more than 0 elements", "the `tensor_1` should have a size greater than 0", "the `tensor_1` should have a dimension greater than 0", "the `tensor_1` should satisfy the requirement that input.shape[-2] must be greater than or equal to input.shape[-1>", "the `tensor_1` should have a number of elements greater than 0", "the `tensor_1` should be a tensor with a number of dimensions greater than 0", "the number of dimensions of `tensor_1` should be greater than 0"], ["the `tensor_1` should have 4 or 5 dimensions", "the `tensor_1` should be a tensor of dimension 4", "the `tensor_1` should be a tensor of dimension 5", "the `tensor_1` should have 4 dimensions", "the `tensor_1` should have 5 dimensions", "the `tensor_1` should have 3 or 4 dimensions", "the `tensor_1` should have a dimension of 4 or 5"], ["the `tensor_1` should not be an mkldnn tensor", "the `tensor_1` should not be a complex tensor", "the `tensor_1` should not be a sparse tensor", "the `tensor_1` should not be a conjugate view tensor", "the `tensor_1` should not have the negative bit set", "the `tensor_1` should not be a 0-dimensional tensor", "the `tensor_1` should not be a cuda tensor", "the `tensor_1` should not be a nested tensor"], ["the `tensor_1`'s device should be equal to the input `device`", "the `tensor_1` tensor must be same dtype as the input tensor", "the `tensor_1` tensor must be on the same device as the input tensor", "the `tensor_1` should not be defined or should be on the same device as the input `device`", "the `tensor_1` should have the same number of bytes as the destination buffer"], ["the `tensor_1` should be a non-empty 4d or 5d tensor", "the `tensor_1` should have a non-empty 4d or 5d (batch mode) tensor", "the `tensor_1` should be a non-empty 2d or 4d tensor", "the `tensor_1` should be a non-empty 2d or 5d tensor", "the `tensor_1` should be a 2d or higher dimensional tensor", "the `tensor_1` should be a 2d tensor or a 4d tensor", "the `tensor_1` should be a 4d or 5d tensor"], ["the `tensor_1` should be defined", "the `tensor_1` should not be defined", "the `tensor_1` should not be null"], ["the `tensor_1` should be a non-empty 3d data tensor", "the `tensor_1` should have same dimension as target (3)", "the `tensor_1` should be a 4d tensor", "the `tensor_1` should be a 3d or 4d tensor", "the `tensor_1` should have 3 dimensions", "the `tensor_1` should be a 3d tensor", "the `tensor_1` should be a vulkan tensor"], ["the `tensor_1` should have a dimension greater than 3", "the `tensor_1` should have dimension less than or equal to 1", "the `tensor_1` should have a size greater than 16", "the `tensor_1` should have a size greater than 0 and be a multiple of 8 in dimension 1", "the `tensor_1` should have a dimension greater than or equal to 2 and less than or equal to 4", "the `tensor_1` should have a dimension greater than or equal to 1 and less than or equal to 4", "the `tensor_1` should have dimensions less than or equal to 4", "the `tensor_1` should have dimension less than or equal to 4", "the `tensor_1` should have a dimension greater than or equal to 1 and less than or equal to 3", "the `tensor_1` should have a dimension greater than 0 and less than or equal to 4", "the number of dimensions of `tensor_1` should be less than 3"], ["the `tensor_1` should be contiguous", "the `tensor_1` should not be defined or should be contiguous", "the `tensor_1` tensor should be contiguous"], ["the `tensor_1` should have 0 dimensions", "the `tensor_1` should be a 0d or 1d tensor", "the `tensor_1` should have 0 dimension", "the `tensor_1` should have dense_dim equal to 0", "the `tensor_1` should have 0d values"], ["the `tensor_1` value count should be equal to the sample point count"], ["the `tensor_1` should be a complex-valued input tensor matching the output from stft with return_complex=true"], ["the `tensor_1` should be a sparse tensor", "the `tensor_1` should be of format csr", "the `tensor_1` should be dense", "the `tensor_1` should be nested"], ["the `tensor_1` should have the same sparse_dim and dense_dim as the input parameters", "the sizes of `tensor_1` and `sparse_` should be equal"], ["the trailing dimension of `tensor_1` should be divisible by 16", "the shape of `tensor_1` must be divisible by 16"], ["the `tensor_1` should be quantized", "the `tensor_1` should not be quantized"], ["the `tensor_1` should be coalesced", "the `tensor_1` should be a coalesced input"], ["the `tensor_1` needs to be mkldnn layout", "the `tensor_1` should be mkldnn or meta tensor"]], "['list_1']": [["the `list_1` should have a value", "the `list_1` should not be empty", "the `list_1` should be greater than 0", "the `list_1` should have a size greater than 0"], ["the `list_1` should have a length that is divisible by 2", "the `list_1` should have an even length", "the `list_1` should have a size that is a multiple of 5", "the `list_1` should have a size that is a multiple of 4", "the `list_1` should have a size that is a multiple of 3", "the `list_1` should have a size that is a multiple of 2"], ["the `list_1` should have a size of 2", "the `list_1` should have a size of 6", "the `list_1` should have a size of 4 or 5", "the `list_1` should have a size greater than or equal to 2", "the `list_1` should have a size of 4", "the `list_1` should have a size of 1 or 2", "the `list_1` should either be empty or have a size of 1 or 2", "the `list_1` should have a size of 1 or 3", "the `list_1` should either be empty, or have a size of 1, or have a size of 3", "the `list_1` should have a size less than or equal to 4", "the `list_1` should have at least 2 elements"], ["the `list_1` should either be empty, a single int, or a tuple of two ints", "the `list_1` should either be a single int, or a tuple of two ints", "the `list_1` should be omitted or a list of one or three integers", "the `list_1` should be a list of one or three integers"], ["the `list_1` should contain one int", "the `list_1` should have values [1, 1]"], ["the first and second elements in `list_1` should be different"], ["the `list_1` should be empty or a 3d list", "the `list_1` should be empty or a 2d list"]], "['tensor_1', 'tensor_2']": [["the `tensor_1` and `tensor_2` should have the same device", "the `tensor_1` and `tensor_2` should be on the same device"], ["the `tensor_1` scalar type should be equal to the `tensor_2` scalar type", "the `tensor_2` should have the same data type as `tensor_1`", "the `tensor_1` should have the same dtype as `tensor_2`", "the `tensor_1` should have the same scalar type as `tensor_2`", "the `tensor_1` should have the same data type as `tensor_2`", "the `tensor_1` should have the same type as `tensor_2`", "the `tensor_1` should have the same type as `tensor_2` if `tensor_2` is defined", "the `tensor_1`'s dtype should be the same as `tensor_2`'s dtype", "the `tensor_1` scalar type should be the same as the `tensor_2` scalar type", "the `tensor_1` and `tensor_2` should have the same data type if `tensor_2` is defined"], ["the `tensor_1` and `tensor_2` should have the same number of dimensions", "the `tensor_1` should have the same dimension as `tensor_2`", "the `tensor_2` should be undefined or have the same number of elements as the second dimension of `tensor_1`", "the `tensor_1` and `tensor_2` should have the same shape", "the `tensor_1` and `tensor_2` should have the same number of elements", "the `tensor_1` and `tensor_2` should have the same number of columns", "the `tensor_1` should have 0 dimension(s), the `tensor_2` should have 0 dimension(s)", "the `tensor_1` and `tensor_2` should have the same shape except for the last dimension", "the `tensor_1` should have the same size in dimension 1 as the `tensor_2` in dimension 0", "the `tensor_2` should have the same size in dimension 0 as the `tensor_1`", "the `tensor_2` should have the same size in dimension 1 as the `tensor_1`", "the `tensor_2` and `tensor_1` should have the same number of elements", "the `tensor_1` should have the same size as `tensor_2`", "the `tensor_2` should be contiguous in the same memory format as the `tensor_1` tensor", "the `tensor_1` and `tensor_2` should have the same number of layers", "the `tensor_1` and `tensor_2` should have equal sizes", "the `tensor_1` and `tensor_2` should have the same number of sparse dimensions", "the `tensor_1` layout should be equal to the `tensor_2` layout"], ["the size of the last dimension of `tensor_1` should match the size of the 2nd dimension of `tensor_2`", "the size of the last dimension of `tensor_1` should match the size of the 3rd dimension of `tensor_2`", "the `tensor_1` and `tensor_2` should have length 3 along the specified dimension", "the number of dimensions of `tensor_1` should be one more than the number of dimensions of `tensor_2`", "the `tensor_1` should have 3 dimensions, the `tensor_2` should have 2 dimensions"], ["the number of elements in `tensor_1` should be equivalent to the number of rows in `tensor_2`", "the number of elements in `tensor_1` should be equal to the number of elements in `tensor_2`", "the number of specified elements in `tensor_1` should be equal to the number of specified elements in `tensor_2`"], ["the `tensor_1` should not be a complex tensor, the `tensor_2` should not be a complex tensor", "the `tensor_1` and `tensor_2` should not be quantized tensors", "the `tensor_1` should be a sparse tensor and the `tensor_2` should not be a sparse tensor"], ["the `tensor_1` and `tensor_2` should have the same qscheme"], ["the `tensor_1` and `tensor_2` should have the same scalar type", "the `tensor_1` and `tensor_2` should have the same data type", "the `tensor_1` and `tensor_2` should have the same dtype", "the `tensor_1` and `tensor_2` should have the same data types", "the `tensor_1` and `tensor_2` should have the same data type as `self`", "the `tensor_1` should be a tensor, and the `tensor_2` should be a tensor. both inputs must have the same quantization scheme.", "the `tensor_1` and `tensor_2` should be of the same data type"], ["the `tensor_1` should be a nested tensor, the `tensor_2` should be a nested tensor", "the `tensor_1` should be a 2d tensor, the `tensor_2` should be a 2d tensor", "the `tensor_1` should have 1 element, the `tensor_2` should have 1 element", "the `tensor_1` should be a 2d tensor, the `tensor_2` should be a 1d tensor"], ["the `tensor_1` should have the same number of batches as `tensor_2`", "the `tensor_1` and `tensor_2` should have the same batch size"], ["the `tensor_1` and `tensor_2` should have compatible matrix sizes for bmm operation", "the `tensor_1` and `tensor_2` should have compatible sizes for matrix multiplication", "the `tensor_1` and `tensor_2` should have compatible shapes for matrix multiplication"], ["the `tensor_1` shape's last dimension should be less than or equal to the `tensor_2` shape's last dimension", "the `tensor_1` and `tensor_2` should satisfy the requirement that input.shape[-1] must be greater than or equal to tau.shape[-1>", "the `tensor_1` should have dimension less than or equal to 4, the `tensor_2` should have dimension less than or equal to 4"], ["the `tensor_1` should be in mkldnn layout, the `tensor_2` should be in mkldnn layout", "the `tensor_1` should be of mkldnn layout, the `tensor_2` should be of mkldnn layout"]], "['scalar_1', 'tensor_1']": [["the `scalar_1` should be equal to the number of dimensions of the `tensor_1` tensor"]], "['int_1']": [["the `int_1` should be equal to 1 or 2", "the `int_1` should be equal to 2", "the `int_1` should be equal to 1", "the `int_1` should be equal to 0"], ["the `int_1` should be non-negative", "the `int_1` should be greater than or equal to 0", "the `int_1` should be less than 0", "the `int_1` should be positive", "the `int_1` should be a non-negative number", "the `int_1` should be greater than or equal to 1", "the `int_1` should be greater than 0", "the `int_1` should be greater than or equal to 6"], ["the `int_1` should be between 0 and number of dimensions of input", "the `int_1` should be within the range of [-self.dim(), self.dim() - 1]"], ["the `int_1` should be either 2 or 4", "the `int_1` should be 2 or 4"]], "['int_1', 'int_2']": [["the `int_1` should be greater than zero, the `int_2` should be greater than zero", "the `int_1` should be less than or equal to `int_2`", "the `int_1` should be less than or equal to 0 and the `int_2` should be greater than or equal to 0"]], "['bool_1', 'tensor_1']": [["the `tensor_1` should be a non-empty 2d or 4d tensor, the `bool_1` should be a boolean", "the `tensor_1` should have a size of at least 1, and if `bool_1` is true, the number of offset should be at least 1"]], "['int_1', 'int_2', 'int_3']": [["the `int_1` should be greater than zero, the `int_2` should be greater than zero, the `int_3` should be greater than zero", "the `int_1` must be between `int_2` and `int_3`"]], "['int_1', 'int_2', 'int_3', 'int_4', 'int_5', 'int_6', 'int_7', 'int_8', 'int_9']": [["the `int_1` should be smaller than either `int_4` or `int_7`, the `int_2` should be smaller than either `int_5` or `int_8`, the `int_3` should be smaller than either `int_6` or `int_9`"]], "['int_1', 'tensor_1']": [["the `int_1` should be greater than or equal to 0 and less than the number of dimensions of `tensor_1`", "the `int_1` should be greater than or equal to 0 and less than or equal to the size of the dimension `dim` of the tensor `tensor_1`", "the `int_1` should be greater than the maximum value in `tensor_1`", "the `int_1` should be equal to 0 or less than the number of dimensions of the `tensor_1` tensor", "the `int_1` should be less than or equal to the number of elements in `tensor_1`", "the `int_1` should be less than the number of dimensions of `tensor_1`", "the `tensor_1` should be contiguous or the `int_1` should be less than or equal to 1"], ["the last dimension of `tensor_1` should be equal to `int_1`", "the `tensor_1` should have a dimension one less than the specified `int_1`"]], "['bool_1']": [["the `bool_1` should have a value", "the `bool_1` should be false", "the `bool_1` should be resizable", "the `bool_1` should not have a value"]], "['str_1']": [["the `str_1` should be equal to '2'"]], "['list_1', 'tensor_1']": [["the `list_1` should be a list, the `tensor_1` should be a tensor", "the `tensor_1` should be a 4d tensor, the `list_1` should be a list of size 2", "the last dimension of `tensor_1` should be less than or equal to the last element of `list_1`"]], "['scalar_1', 'scalar_2']": [["either the `scalar_1` or `scalar_2` should not be none", "the `scalar_1` or the `scalar_2` should not be none"]], "['tensor_1', 'tensor_2', 'tensor_3']": [["the `tensor_1` should be a 2d tensor, the `tensor_2` should be a 1d tensor, the `tensor_3` should be a 1d tensor or a scalar", "the `tensor_1` should have the same number of columns as the `tensor_2` has elements, and the `tensor_1` should have the same number of rows as the `tensor_3` has elements or the `tensor_3` is a scalar", "the shapes of `tensor_1`, `tensor_2`, and `tensor_3` should be the same", "the `tensor_1` should be a 4d tensor, the `tensor_2` should be a 4d tensor, the `tensor_3` should be a 4d tensor", "the `tensor_1`'s 4th dimension should be equal to the `tensor_3`'s 4th dimension, the `tensor_2`'s 4th dimension should be equal to the `tensor_3`'s 4th dimension", "the `tensor_1` should be contiguous, the `tensor_2` should be contiguous, the `tensor_3` should be contiguous", "the `tensor_1`, `tensor_2`, and `tensor_3` should all be at least 2 dimensional"], ["the `tensor_1` device should be the same as the `tensor_3` device and the `tensor_2` device", "the `tensor_1` should have the same device as `tensor_3` and `tensor_2`", "the `tensor_1` device should be the same as `tensor_2` and `tensor_3` device", "the `tensor_1` device should be the same as the `tensor_2` device and the `tensor_3` device"], ["the `tensor_1` dtype should be the same as `tensor_2` and `tensor_3` dtype"]], "['tensor_2']": [["the `tensor_2` should be a vector/scalar", "the `tensor_2` should have dimension less than or equal to 1"]], "['bool_1', 'list_1']": [["the `list_1` should be a list and the `bool_1` should be a boolean"]], "['int_1', 'tensor_1', 'tensor_2']": [["the number of elements in `tensor_1` should be equal to the size of `tensor_2` along the `int_1`"]], "['int_1', 'int_2', 'tensor_1']": [["the `int_1` should be greater than or equal to 0 and less than or equal to the size of the dimension specified by `int_2` in the `tensor_1` tensor"]]}